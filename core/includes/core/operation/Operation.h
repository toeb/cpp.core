#pragma once
#include <core/core.h>

#define CALL_OPERATION(NAME) Operation##NAME::operation

#define NULLARY_OPERATION(NAME,RETURNARGUMENT,IMPLEMENTATION)\
class Operation##NAME{public:static inline bool operation(RETURNARGUMENT){{IMPLEMENTATION;}return false;}};

#define UNARY_OPERATION(NAME,RETURNARGUMENT,INPUTARGUMENT,IMPLEMENTATION)\
class Operation##NAME{public:static inline bool operation(RETURNARGUMENT,INPUTARGUMENT){{IMPLEMENTATION;}return false;}};

#define BINARY_OPERATION(NAME,RETURNARGUMENT,INPUTARGUMENT1, INPUTARGUMENT2,IMPLEMENTATION)\
class Operation##NAME{public:static inline bool operation(RETURNARGUMENT,INPUTARGUMENT1,INPUTARGUMENT2){{IMPLEMENTATION;}return false;}};
#define NARY_OPERATION3(NAME,RETURNARGUMENT,INPUTARGUMENT1, INPUTARGUMENT2, INPUTARGUMENT3,IMPLEMENTATION)\
class Operation##NAME{public:static inline bool operation(RETURNARGUMENT,INPUTARGUMENT1,INPUTARGUMENT2, INPUTARGUMENT3){{IMPLEMENTATION;}return false;}};
#define NARY_OPERATION4(NAME,RETURNARGUMENT,INPUTARGUMENT1, INPUTARGUMENT2, INPUTARGUMENT3, INPUTARGUMENT4,IMPLEMENTATION)\
class Operation##NAME{public:static inline bool operation(RETURNARGUMENT,INPUTARGUMENT1,INPUTARGUMENT2, INPUTARGUMENT3, INPUTARGUMENT4){{IMPLEMENTATION;}return false;}};
#define NARY_OPERATION5(NAME,RETURNARGUMENT,INPUTARGUMENT1, INPUTARGUMENT2, INPUTARGUMENT3, INPUTARGUMENT4, INPUTARGUMENT5,IMPLEMENTATION)\
class Operation##NAME{public:static inline bool operation(RETURNARGUMENT,INPUTARGUMENT1,INPUTARGUMENT2, INPUTARGUMENT3, INPUTARGUMENT4, INPUTARGUMENT5){{IMPLEMENTATION;}return false;}};

#define NARY_OPERATION(ARGUMENTCOUNT, NAME,RETURNARGUMENT,IMPLEMENTATION,...) NARY_OPERATION##ARGUMENTCOUNT(NAME,RETURNARGUMENT,__VA_ARGS__)

#define OPERATION(NAME) class Operation##NAME
#define OPERATION_SPECIALIZATION(NAME) class Operation##NAME

#define OPERATION_IMPLEMENTATION public:static inline bool operation
#define SPECIALIZATION public:static inline bool operation
